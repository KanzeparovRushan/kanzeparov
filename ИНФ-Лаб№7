#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include<Windows.h>
#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include <ctime>
#include <math.h>	
#include <conio.h>
#include <algorithm>
using namespace std;
const int l_x = 10, l_y = 10;
//Объявление структуры
struct Cordinata {
	char x[l_x + 1];
	char y[l_y + 1];
	int r_;
};
//Объявление функции с умалчиваемыми параметрами для печати структуры
void print(const char* x = "x", const char* y = "y", int r = 1) { cout << "\n" << x << ' ' << y << ' ' << r; }
//Объявление функции с переменным числом параметров для определения среднего арифметического элементов
float sr_ar(int a, ...);
//Объявление перегруженных функций типа int, double, char для нахождения минимального элемента
int min_(const int* mas, const int n);
double min_(const double* mas, const int n);
char* min_(char** mas, const int n);
//Объявление шаблона функций для вычисления минимального элемента
template <class T> T Min(T* b, int n);
//Тип-указатель на функцию уравнения
typedef float(*fptr)(float);
//Функция, реализующая метод итераций
float root(fptr f, float e);
//Функция находит корень уравнения
float testf(float x);
int main()
{
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	srand(time(0));
	Cordinata Cordinata;
	char buf[3];
	char x[l_x + 1];
	char y[l_y + 1];
	cout << "Задание 1" << endl;
	cout << endl;
	puts("Введите x: "); gets_s(x);
	if (strlen(x) < l_x)
		for (int i = strlen(x); i < l_x; i++)
			x[i] = ' ';
	x[l_x] = 0;
	//Копирование введённого значения в структуру
	strncpy(Cordinata.x, x, l_x + 1);
	puts("Введите y: "); gets_s(y);
	if (strlen(y) < l_y)
		for (int i = strlen(y); i < l_y; i++)
			y[i] = ' ';
	y[l_y] = 0;
	strncpy(Cordinata.y, y, l_y + 1)
	cout << "Результаты вызова функции с умалчиваемыми параметрами" << endl;
	//Вызов функции с параметрами заданными явно
	print(Cordinata.x, Cordinata.y, Cordinata.r_);
	//Вызов функции с опущенными параметрами
	print();
	//Вызов функции, часть параметров задана явно, а часть опущена
	print(Cordinata.x, Cordinata.y);
	cout << endl;
	cout << endl;
	cout << "Задание 2" << endl;
	cout << endl;
		srand(time(NULL));
		int* arr = NULL;
		int n, cnt = 0;
		double aver = 0.;
		cout << "Размер Массива = "; cin >> n;
		arr = new int[n];
		for (int i = 0; i < n; i++) {
			arr[i] = -100 + rand() % 201;
			cout << arr[i] << "\t";
			if (!(i % 2) && !(arr[i] % 2)) {
				cnt++;
				aver += arr[i];
			}
		}
		if (cnt) cout << endl << "Среднее значение = " << aver / cnt;
		else cout << endl << "Не совподает";
		delete[] arr;
	cout << endl;
	int i, m;
	cout << "Задание 3" << endl;
	cout << endl;
	int ar[10]; // создали массив на 10 элементов
	int key; // создали переменную в которой будет находиться ключ
	cout << "Введите 10 чисел для заполнения массива: " << endl;
	for (int i = 0; i < 10; i++) {
		cin >> ar[i]; // считываем элементы массива
	}
	sort(ar, ar + 10); // сортируем с помощью функции sort (быстрая сортировка)
	cout << endl << "Введите ключ: ";
	cin >> key; // считываем ключ
	bool flag = false;
	int l = 0; // левая граница
	int r = 9; // правая граница
	int mid;
	while ((l <= r) && (flag != true)) {
		mid = (l + r) / 2; // считываем срединный индекс отрезка [l,r]

		if (ar[mid] == key) flag = true; //проверяем ключ со серединным элементом
		if (ar[mid] > key) r = mid - 1; // проверяем, какую часть нужно отбросить
		else l = mid + 1;
	}
	if (flag) cout << "Индекс элемента " << key << " в массиве равен: " << mid;
	else cout << "Извините, но такого элемента в массиве нет" << endl;
	cout << endl;
	cout << "Задание 4" << endl;
	cout << endl;
	//В функцию root передается указатель на функцию и точность
	float res = root(testf, 2.624);
	cout << "X = " << res << endl;
	return 0;
}
//Вычисление среднего арифметического элементов
float sr_ar(int a, ...) {
	va_list arg;
	va_start(arg, a);
	float sum = 0, n = 0;
	for (int i = 0; i < a; i++) {
		int x = va_arg(arg, int);
		sum += x;
		n++;
	}
	float sr = sum / n;
	va_end(arg);
	return sr;
}
//Нахождение минимального элемента int
int min_(const int* mas, const int n) {
	cout << "Массив чисел типа int : " << endl;
	for (int i = 0; i < n; i++) {
		cout << "mas[" << i << "]=" << mas[i];
		cout << endl;
	}
	int min = mas[0];
	for (int i = 0; i < n; i++) {
		if (mas[i] < min) min = mas[i];
	}
	cout << endl;
	return min;
}
//Нахождение минимального элемента double
double min_(const double* mas, const int n) {
	cout << "Массив чисел типа double : " << endl;
	for (int i = 0; i < n; i++) {
		cout << "mas[" << i << "]=" << mas[i];
		cout << endl;
	}
	double min = mas[0];
	for (int i = 0; i < n; i++) {
		if (mas[i] < min) min = mas[i];
	}
	cout << endl;
	return min;
}
//Нахождение минимального элемента char
char* min_(char** mas, const int n) {
	cout << "Массив чисел типа char : " << endl;
	for (int i = 0; i < n; i++) {
		cout << "mas[" << i << "]=" << mas[i];
		cout << endl;
	}
	char* min1 = new char[n];
	int min = strlen(mas[0]);
	for (int i = 0; i < n; i++) {
		if (strlen(mas[i]) < min) {
			min = strlen(mas[i]);
			min1 = mas[i];
		}
		else if (strlen(mas[i]) == min) {
			min = strlen(mas[i]);
			min1 = mas[i];
		}
	}
	cout << endl;
	return min1;
}
//Шаблон функции нахождение минимального элемента
template <class T> T Min(T* b, int n) {
	cout << "Массив чисел : " << endl;
	for (int i = 0; i < n; i++) {
		cout << "mas[" << i << "]=" << b[i];
	cout << endl;
	}
	double min = b[0];
	for (int i = 0; i < n; i++) {
		if (b[i] < min) min = b[i];
	}
	cout << endl;
	return min;
}
//Реализация метода итераций
float root(fptr f, float e)
{
	float x; float res;
	float x0 = 0, x1;
	do
	{
		x1 = x0;
		//Присваиваем значение найденное в функции
		x0 = (*f)(x1);
	} while (fabs(x0 - x1) > e);
	return x0;
}
//Уравнение для вычисления корня
float testf(float x)
{
	return x - (1/  (3 + sin(3.6) * x);
}
